#!/bin/bash

function print_help() {
    echo "Instructions to use Rip Utility"
    echo "_______________________________"
    echo ""
    echo "Init"
    echo "Initialize rip utility and manifest files"
    echo "./ripple init"
    echo ""
    echo "Run"
    echo "To Run Ripple alongside a device connected to the same network use the below command"
    echo "ripple run <ip address of the device>"
    echo "Example"
    echo "ripple run 10.0.0.1"
}

case ${1} in
    "init")
        cp -f ./ripple ~/.cargo/bin
        mkdir -p ~/.ripple
        cp ./examples/manifest/device-manifest-example.json ~/.ripple/firebolt-device-manifest.json
        cp ./examples/manifest/extn-manifest-example.json ~/.ripple/firebolt-extn-manifest.json
        cp ./examples/manifest/app-library-example.json ~/.ripple/firebolt-app-library.json
    ;;
    "run")
        cargo build

        if [ "$2" == "127.0.0.1" -o "$2" == "localhost" ]; then
            export THUNDER_TOKEN=$('/usr/bin/WPEFrameworkSecurityUtility' | cut -d':' -f2 | cut -d'"' -f2)
        elif [ "$3" == "-port" -a "$4" != "" ]; then
            export THUNDER_TOKEN=$(ssh -o StrictHostKeyChecking=no -p $4 root@$2 '/usr/bin/WPEFrameworkSecurityUtility' | cut -d':' -f2 | cut -d'"' -f2)
        else
            export THUNDER_TOKEN=$(ssh root@$2 '/usr/bin/WPEFrameworkSecurityUtility' | cut -d':' -f2 | cut -d'"' -f2)
        fi

        THUNDER_HOST=${2} cargo run core/main
    ;;
    "-h")
        print_help
    ;;
    *)
      	print_help
    ;;
esac
